package api

import (
	// "code.google.com/p/go.crypto/bcrypt"
	// "github.com/gorilla/sessions"
	// "github.com/PolkaSpots/puffin-api-v2/db"
	"net/http"
	// "net/http/httptest"
	"testing"
)

func TestLoginHandler(t *testing.T) {
	mockDb := db.NewMockDbManager(false)
	jar := sessions.NewCookieStore([]byte("secret key"))
	loginHandle := loginHandler(mockDb, jar)
	test := GenerateHandleTester(t, loginHandle)

	// Test GET request
	w := test("GET", "")
	if w.Code != http.StatusNotFound {
		t.Errorf(
			"GET /login returned %v. Expected %v",
			w.Code,
			http.StatusNotFound,
		)
	}

	goodParams := `{"username":"test user", "password":"test pass"}`

	// Test possible combinations of bad inputs
	badParams := [...]string{
		`{}`,
		`{"username":"test user"}`,
		`{"password":"test pass"}`,
		// Should fail because not in database
		goodParams,
	}

	for _, params := range badParams {
		w := test("POST", params)
		if w.Code != http.StatusBadRequest {
			t.Errorf(
				"POST /login: bad input returned %v. Expected %v.",
				w.Code,
				http.StatusBadRequest,
			)
		}
	}

	// Test with good params
	hash, _ := bcrypt.GenerateFromPassword(
		[]byte("test pass"),
		bcrypt.DefaultCost,
	)
	mockDb.RegisterUser("test user", hash)

	w = test("POST", goodParams)
	if w.Code != http.StatusOK {
		t.Errorf(
			"POST /login: good input returned %v. Expected %v.",
			w.Code,
			http.StatusOK,
		)
	}
}
